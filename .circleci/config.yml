# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.12.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

commands:
  destroy_environment:
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: echo Workflow ID that is going to be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run: 
          name: Revert migrations
          working_directory: ./backend
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_KEY}/migration_<< parameters.workflowID >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run 
            echo "testing notification"
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-backend
          command: |
            cd backend
            npm install 
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing packages
          command: |
            yum install git -y
            yum install tar gzip -y
      - run:
          name: Ensuring Backend Exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/backend.yml 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              --tags project=udapeople
      
      - run:
          name: Ensuring Frontend Infrastructure exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/frontend.yml 
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              --tags project=udapeople
      - run: 
          name: Adding EC2 instance IP to Ansible Inventory for backend
          command: |
           aws ec2 describe-instances \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --output text >> .circleci/ansible/inventory.txt
           cat .circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7a:13:40:7a:84:05:21:f0:35:ed:ec:ac:7b:b3:51:4d"]
      - attach_workspace:
          at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Installing Dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Installing NPM
          command: |
            cd backend 
            npm install
            npm run migrations > migrations_dump.txt
            ls -al
            cat migrations_dump.txt
      - run: 
          name: Send migration status to a 3rd party key-value store
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
               curl --insecure https://kvdb.io/${KVDB_KEY}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
               echo "Successfully Migrated"
               else
               echo "No Migrations"
            fi
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances 
              --query 'Reservations[*].Instances[*].PublicIpAddress' 
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy Frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["81:ab:74:62:1f:4f:b2:a7:aa:83:bd:71:e0:39:9f:c5"]
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the ~/project/.circleci/ansible/inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      #- destroy_environment:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli nodejs npm
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            echo ${BACKEND_IP}
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"           
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if [[ 'ok' =~ $(curl -s --connect-timeout 5 http://${BACKEND_IP}:3030/api/status | grep -o ok) ]];then return 0 else return 1;fi
            # if curl "${API_URL}/api/status" | grep "ok"
            # then
            #     return 0
            # else
            #     return 1
            # fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo "success" && return 0
            else
              echo "failed" && return 1
            fi
      #- destroy_environment:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: get Old Workflow
          command: |
            # your code here
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
                    echo "Old Wokflow ID : $OLD_WORKFLOW_ID"
                    curl https://kvdb.io/${KVDB_KEY}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update Cloudformation distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
            echo "Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}"
      #- run:
          #name: Update cloudfront distribution
          #command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      #- destroy_environment:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations:
          #workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Query CloudFormation to Find Old Stack's workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_WORKFLOW_ID}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_WORKFLOW_ID}
              else
                No clean up
              fi
            
        
    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      
