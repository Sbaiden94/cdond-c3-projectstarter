# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.12.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

commands:
  destory_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run 
            echo "testing notification"
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test-backend
          command: |
            cd backend
            npm install 
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing packages
          command: |
            yum install git -y
            yum install tar gzip -y
      - run:
          name: Ensuring Backend Exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/backend.yml 
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              --tags project=udapeople
      
      - run:
          name: Ensuring Frontend Infrastructure exist
          command:
            aws cloudformation deploy 
              --template-file .circleci/files/frontend.yml 
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              --tags project=udapeople
      - run: 
          name: Adding EC2 instance IP to Ansible Inventory for backend
          command: |
            aws ec2 describe-instances 
              --query 'Reservations[*].Instances[*].PublicIpAddress' 
              --filters "Name=tag:Name,Values=backend-${ID}" 
              --output text >> ~/ansible/inventory.txt

      - run: 
          name: Adding EC2 instance IP to Ansible Inventory for frontend
          command: |
            aws ec2 describe-instances
              --query 'Reservations[*].Instances[*].PublicIpAddress' 
              --filters "Name=tag:Name,Values=frontend-${ID}" 
              --output text >> ~/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/ansible
          paths:
            - "inventory.txt"
      - destory_environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7a:13:40:7a:84:05:21:f0:35:ed:ec:ac:7b:b3:51:4d"]
      - attach_workspace:
          at: ~/ansible
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
            yum install ansible -y
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend] 
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      
